// Zed keymap
//
// For information on binding keys, see the Zed
// documentation: https://zed.dev/docs/key-bindings
//
// To see the default key bindings run `zed: open default keymap`
// from the command palette.
[
  {
    // General bindings
    "bindings": {
      //
      "cmd-h": "workspace::ToggleLeftDock",
      "cmd-l": "workspace::ToggleRightDock",
      "cmd-j": "workspace::ToggleBottomDock",
      "cmd-o": "file_finder::Toggle",
      "cmd-t": "outline::Toggle",
      "cmd-r": "project_symbols::Toggle",
      "cmd-p": "command_palette::Toggle",
      //
      "cmd-1": "project_panel::ToggleFocus",
      "cmd-2": "git_panel::ToggleFocus",
      "cmd-3": "outline_panel::ToggleFocus",
      "cmd-4": "debug_panel::ToggleFocus",
      "cmd-5": "agent::ToggleFocus",
      "cmd-0": "terminal_panel::ToggleFocus"
    }
  },
  {
    "context": "Editor && jupyter && !ContextEditor",
    "use_key_equivalents": true,
    "bindings": {
      "shift-enter": "repl::Run",
      "alt-shift-enter": "repl::RunInPlace"
    }
  },
  {
    "context": "Pane",
    "bindings": {
      "cmd-k cmd-p": "pane::TogglePinTab"
    }
  },

  // Vim Bindings
  // Note: lots of great default bindings here:
  // https://zed.dev/docs/vim#zed-specific-features
  {
    "context": "VimControl && !menu",
    // VimControl means normal, visual or operator modes
    "bindings": {
      // leader shortcuts (using space as leader)
      // Finding files and symbols
      "space": null,
      "space f f": "file_finder::Toggle",
      "space f d": "tab_switcher::ToggleAll",
      "space f s": "outline::Toggle",
      "space f a": "project_symbols::Toggle",
      "space f r": "task::Spawn",
      "space f g": "pane::DeploySearch",
      "space space": "command_palette::Toggle",
      // Git
      "space g d": "git::Diff",
      "space g s": "git::ToggleStaged",
      "space g g": "git::StageAndNext",
      "space g shift-r": "git::Restore",
      "space g shift-a": "git::StageAll",
      "space g shift-u": "git::UnstageAll",
      "space g c": "git::Commit",
      "space g b": "git::Switch",
      "space g p": "git::Push",
      "space g h": "editor::ToggleSelectedDiffHunks"
    }
  },
  {
    "context": "vim_mode == normal || vim_mode == visual && !menu",
    "bindings": {
      // g shortcuts
      // Note: multi-cursor support defaults to ga, gl, gL
      // Subword motions
      "g w": "vim::NextSubwordStart",
      "g b": "vim::PreviousSubwordStart",
      "g e": "vim::NextSubwordEnd",
      "g shift-e": "vim::PreviousSubwordEnd",
      // vim-sneak movements: s<a><b> to move to 'ab'
      // https://github.com/justinmk/vim-sneak
      // Not all funcionality works
      "s": "vim::PushSneak",
      "shift-s": "vim::PushSneakBackward"
      // vim-exchange also works by default (cx<motion>, cxx, cxc)
      // https://github.com/tommcdo/vim-exchange
    }
  },
  {
    "context": "vim_mode == visual && !menu",
    "bindings": {
      "shift-s": ["vim::PushAddSurrounds", {}]
    }
  },
  {
    "context": "vim_mode == insert",
    "bindings": {
      "ctrl-l": ["workspace::SendKeystrokes", "delete"],
      "ctrl-x ctrl-o": "editor::ShowCompletions",
      "ctrl-x ctrl-a": "assistant::InlineAssist", // zed specific
      "ctrl-x ctrl-l": "editor::ShowEditPrediction", // zed specific
      "ctrl-x ctrl-c": "editor::ToggleCodeActions", // zed specific
      "ctrl-x ctrl-s": "editor::ShowSignatureHelp", // zed specific
      "ctrl-x ctrl-x": "editor::Cancel",
      "ctrl-x ctrl-n": "editor::NextEditPrediction",
      "ctrl-x ctrl-p": "editor::PreviousEditPrediction"
    }
  },
  {
    "context": "vim_operator == a || vim_operator == i || vim_operator == cs",
    // Configure quote and bracket text objects, e.g. for commands like
    // yib/yab/ciq/caq etc.
    // q matches ', ", or `
    // b matches (, [, {, or <
    "bindings": {
      // mini.ai plugin behavior (uses tree-sitter for context aware matching)
      "q": "vim::MiniQuotes", // Traditional Vim behavior: "vim::AnyQuotes",
      "b": "vim::MiniBrackets" // Traditional Vim behavior: "vim::AnyBrackets"
    }
  },
  {
    "context": "Picker || Editor",
    "bindings": {
      // Within various modals, make it easier to cancel with the familiar vim keymap
      "ctrl-[": ["workspace::SendKeystrokes", "escape"]
    }
  },
  {
    "context": "Dock",
    "bindings": {
      "ctrl-w h": "workspace::ActivatePaneLeft",
      "ctrl-w l": "workspace::ActivatePaneRight",
      "ctrl-w k": "workspace::ActivatePaneUp",
      "ctrl-w j": "workspace::ActivatePaneDown"
    }
  }
]
