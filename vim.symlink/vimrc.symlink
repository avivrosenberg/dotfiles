" vim: nowrap fdm=marker
" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Pathogen Initialization {{{1
" load pathogen plugin
runtime bundle/vim-pathogen/autoload/pathogen.vim

" list of bundle names for pathogen to skip loading
let g:pathogen_disabled = []

" This loads all the plugins in ~/.vim/bundle (except skipped ones)
execute pathogen#infect()
execute pathogen#helptags()

" General VIM settings {{{1
filetype plugin on
filetype indent on
syntax on                               " syntax highlighting
set ruler                               " show the cursor position all the time
set showcmd                             " display incomplete commands
set showmode                            " Show current mode down the bottom
set number                              " line numbers
set nowrap                              " don't wrap lines
set linebreak                           " wrap lines at convenient points
set backspace=indent,eol,start          " allow backspacing over everything in insert mode
set hidden                              " allow hiding buffers with changes
set laststatus=2                        " always show statusbar
set wildmenu                            " enhanced commandline completion
set wildmode=full                       " commandline completion mode
set completeopt=menu,preview,longest    " completion oinserts text up to the longest match only
set diffopt+=vertical                   " always open diff with vertical split
set spelllang=en_us                     " language for spell checking
set clipboard=unnamed                   " copy to system clipboard if no register specified
set scrolloff=2                         " keep a few lines visible when scrolling at the top/bottom
set ttimeoutlen=50                      " key chord timeout length - speeds up transiton from visual to normal mode

" Leader Key definition {{{2
let mapleader = ","                     " define leader key for custom mappings, and remap default to comma
let maplocalleader = ","                " leader key for mappings which are local to a buffer
noremap \ ,

" Invisible characters {{{2
set encoding=utf-8
set listchars=tab:▸•,eol:¬,trail:•,extends:»,precedes:«,nbsp:¬

" Disable error bells {{{2
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" Backup {{{2
set history=1000                    " keep n lines of command line history
set undolevels=1000                 " lots of undo power
set wildignore=*.swp,*.bak          " extensions to ignore when expanding wildcards
set backup                          " keep a backup file
set backupdir=~/.vimtmp             " keep all backups in a separate folder
set backupext=.vimbackup            " set extention for backup files
set noswapfile                      " don't create a swap file (everything in RAM)

" Searching {{{2
set incsearch                       " do incremental searching
set hlsearch                        " hilight current search pattern
set ignorecase                      " case insensitive
set smartcase                       " choose correct case when searching
set gdefault                        " global substitution default

" General Indentation {{{2
set autoindent
set copyindent
set smartindent
set smarttab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set shiftround
set expandtab

" Mouse {{{3
" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
    set mouse=a
endif

" Cursor {{{3
if !has('gui_running')
    " set the cursor to a vertical line in insert mode and a solid block in nomal mode
    " and use a special hack for running vim in tmux...
    if exists('$TMUX')
        let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
        let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
    else
        let &t_SI = "\<Esc>]50;CursorShape=1\x7"
        let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    endif
    " mapping to force immidiate cursor redraw
    inoremap <special> <Esc> <Esc>hl
endif

" Colors {{{2

" Check if we're using a dark or light theme
" This will only work on OSX with iTerm2, in other cases we'll default to
" dark.
if $ITERM_PROFILE =~ "[Ll]ight"
    set background=light
else
    set background=dark
endif
colorscheme solarized
hi clear CursorLineNr " fixes the ugly yellow default line number color

" Key Mappings {{{1
" Searching {{{2

" Search with very-magic by default
noremap / /\v
noremap ? ?\v

" If using CTRL-/ and CTRL-?, use very-nomagic
noremap <C-_> /\V
noremap <C-?> ?\V

" Window and buffer switching {{{2
nnoremap <Leader><Leader> <C-^>
nnoremap <silent> <Down> :bnext<CR>
nnoremap <silent> <Up> :bprevious<CR>
nnoremap <silent> <Left> :tabprevious<CR>
nnoremap <silent> <Right> :tabnext<CR>

" Commandline Mode {{{2
" better scrolling of commandline history: Up/Down support partial matching
cnoremap <C-N> <Down>
cnoremap <C-P> <Up>

" Insert Mode {{{2
" Delete forward in insert mode
inoremap <C-l> <Del>

" Leader Key Mappings for plugins{{{2
" NERDTree {{{3
nmap <Leader>tt :NERDTreeToggle<CR>
nmap <Leader>tf :NERDTreeFind<CR>

" Fugitive {{{3
nmap <Leader>gs :Gstatus<CR><C-W>K
nmap <Leader>gS :Gstatus \| only<CR>
nmap <Leader>gd :Gdiff<CR>
nmap <Leader>ge :Gedit<CR>
nmap <Leader>gw :Gwrite<CR>
nmap <Leader>gb :Gblame<CR>
nmap <Leader>gl :Glog<CR>
nmap <Leader>gg :Ggrep <C-R><C-W><CR>

" Tagbar {{{3
nmap <Leader>tg :TagbarOpen fjc<CR>

" CTags {{{2
" Create tags, redirect warnings to /dev/null and skip prompt
nnoremap <Leader>T :!ctags -R --exclude=.git --exclude=logs --exclude=doc --exclude=vendor . 2>/dev/null<CR><CR>

" Other {{{3
nmap <silent> <Leader><Space> :nohl<CR>
nnoremap <Leader>lq :copen<CR>
nnoremap <Leader>ll :lopen<CR>

" CtrlP {{{2
nnoremap <silent> <Leader>ff :CtrlP<CR>
nnoremap <silent> <Leader>fb :CtrlPBuffer<CR>
nnoremap <silent> <Leader>fT :CtrlPTag<CR>
nnoremap <silent> <Leader>ft :CtrlPBufTag<CR>
nnoremap <silent> <Leader>fd :CtrlPDir<CR>
nnoremap <silent> <Leader>fm :CtrlPMRU<CR>

" Whitespace removal {{{2
nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>
nmap _= :call Preserve("normal gg=G")<CR>

" Plugin Customizations {{{1

" Ruby Completion {{{2
let g:rubycomplete_classes_in_global = 1
let g:rubycomplete_rails = 1
let g:rubycomplete_use_bundler = 1
"let g:rubycomplete_buffer_loading = 1

" Fugitive {{{2
" This maps '..' to go back when browsing object with fugitive.
autocmd User fugitive
  \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
  \   nnoremap <buffer> .. :edit %:h<CR> |
  \ endif
" Delete fugitive buffers on exit
autocmd BufNewFile,BufRead fugitive://* set bufhidden=delete

" Gitv {{{2
let g:Gitv_WipeAllOnClose = 1
let g:Gitv_DoNotMapCtrlKey = 1

" Airline {{{2
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#whitespace#enabled = 1
let g:airline#extensions#tagbar#enabled = 0

" Tagbar {{{2
" use 'ripper-tags' (if available) to generate ruby ctags with tagbar
if executable('ripper-tags')

    " Configure Tagbar to user ripper-tags with ruby
    let g:tagbar_type_ruby = {
                \ 'kinds' : [
                    \ 'm:modules',
                    \ 'c:classes',
                    \ 'f:methods',
                    \ 'F:singleton methods',
                    \ 'C:constants',
                    \ 'a:aliases'
                \ ],
                \ 'ctagsbin':  'ripper-tags',
                \ 'ctagsargs': ['-f', '-']
                \ }
endif

" CtrlP {{{2
let g:ctrlp_working_path_mode = '0'
let g:ctrlp_by_filename = 1 " by default, match filenames (not full path). <C-d> toggles.
let g:ctrlp_show_hidden = 1
" custom ignore expressions
let g:ctrlp_custom_ignore = {
            \ 'dir':  '\.git$\|vendor/bundle',
            \ 'file':  '\.DS_Store$'
            \}
" add modes
let g:ctrlp_extensions = ['tag', 'buffertag']

" Syntastic {{{2
" Use ruby-lint if available
" let g:syntastic_ruby_checkers = ['mri', 'rubylint']
" Show errors from different checkers together
let g:syntastic_aggregate_errors = 1

" Ack {{{2
" Use the_silver_searcher (Ag) instead of ack
let g:ackprg='ag'

" VimTeX {{{2
let g:tex_flavor = "latex"
let g:vimtex_latexmk_build_dir = "aux"

" UltiSnips {{{2
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEnableSnipMate = 0 " Disable snipMate snippets

" vim-matlab {{{2
let g:mlint_path_to_mlint = "/Applications/MATLAB_R2015a.app/bin/maci64/mlint"

" racer {{{2
let $RUST_SRC_PATH=expand("~/dev/rust/rust/src/")

" Custom VIM functions {{{1

" preserve: save state and execute command {{{2
function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

