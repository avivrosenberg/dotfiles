" vim: nowrap fdm=marker ft=vim
" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" Pathogen Initialization {{{1
" load pathogen plugin
runtime bundle/vim-pathogen/autoload/pathogen.vim

" list of bundle names for pathogen to skip loading
let g:pathogen_disabled = []

" List of languages to skip during vim-polyglot initialization
" Skip markdown here because I want the vim-pandoc plugin to handle markdown files.
let g:polyglot_disabled = ['markdown', 'mathematica']

" This loads all the plugins in ~/.vim/bundle (except skipped ones)
execute pathogen#infect()
execute pathogen#helptags()

" General VIM settings {{{1
filetype plugin on
filetype indent on
syntax on                               " syntax highlighting
set ruler                               " show the cursor position all the time
set showcmd                             " display incomplete commands
set noshowmode                          " Don't show current mode down the bottom (no need with airline)
set number                              " line numbers
set relativenumber                      " relative line numbers
set nowrap                              " don't wrap lines
set linebreak                           " wrap lines at convenient points
set backspace=indent,eol,start          " allow backspacing over everything in insert mode
set hidden                              " allow hiding buffers with changes
set laststatus=2                        " always show statusbar
set wildmenu                            " enhanced commandline completion
set wildmode=full                       " commandline completion mode
set completeopt=menu,preview,longest    " completion oinserts text up to the longest match only
set diffopt+=vertical                   " always open diff with vertical split
set nospell                             " no spell checking by default (set per filetype)
set spelllang=en_us                     " language for spell checking
set clipboard=unnamed                   " copy to system clipboard if no register specified
set scrolloff=2                         " keep a few lines visible when scrolling at the top/bottom
set timeoutlen=500                      " key chord timeout length - speeds up transiton from visual to normal mode
set foldlevelstart=99                   " To open all folds when opening a file
set conceallevel=0                      " Disable conceal

" Leader Key definition {{{2
let mapleader = ","                     " define leader key for custom mappings, and remap default to comma
let maplocalleader = ","                " leader key for mappings which are local to a buffer
noremap \ ,

" Invisible characters {{{2
set encoding=utf-8
set listchars=tab:▸•,eol:¬,trail:•,extends:»,precedes:«,nbsp:¬
" Disable error bells {{{2
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

" Backup {{{2
set history=1000                    " keep n lines of command line history
set undolevels=1000                 " lots of undo power
set wildignore=*.swp,*.bak          " extensions to ignore when expanding wildcards
set backup                          " keep a backup file
set backupdir=~/.vimtmp             " keep all backups in a separate folder
set backupext=.vimbackup            " set extention for backup files
set noswapfile                      " don't create a swap file (everything in RAM)

" Make sure backup dir exists
if !isdirectory($HOME."/.vimtmp")
    call mkdir($HOME."/.vimtmp", "p")
endif

" Searching {{{2
set incsearch                       " do incremental searching
set hlsearch                        " hilight current search pattern
set ignorecase                      " case insensitive
set smartcase                       " choose correct case when searching

" General Indentation {{{2
set autoindent
set copyindent
set smartindent
set smarttab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set shiftround
set expandtab

" Mouse {{{3
" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
    set mouse=a
endif

" Cursor {{{3
if !has('gui_running')
    " set the cursor to a vertical line in insert mode and a solid block in nomal mode
    " and use a special hack for running vim in tmux...
    if exists('$TMUX')
        let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
        let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
    else
        let &t_SI = "\<Esc>]50;CursorShape=1\x7"
        let &t_EI = "\<Esc>]50;CursorShape=0\x7"
    endif
    " mapping to force immidiate cursor redraw
    inoremap <special> <Esc> <Esc>hl
endif

" Colors {{{2

" Check if we're using a dark or light theme
" This will only work on OSX with iTerm2, in other cases we'll default to
" dark.
if $ITERM_PROFILE =~ "[Ll]ight"
    set background=light
else
    set background=dark
endif

" True color support (see :help xterm-true-color)
let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors

colorscheme solarized8


" Python {{{2
" For neovim, need to prove a python env with installed pynvim library
let g:python3_host_prog = expand('~/miniconda3/bin/python3')

" Key Mappings {{{1
" Searching {{{2

" If using CTRL-/ and CTRL-?, use very-magic
noremap <C-_> /\v
noremap <C-?> ?\v

" Window and buffer switching {{{2
nnoremap <Leader><Leader> <C-^>
nnoremap <silent> <Down> <NOP>
nnoremap <silent> <Up> <NOP>
nnoremap <silent> <Left> <NOP>
nnoremap <silent> <Right> <NOP>

" Commandline Mode {{{2
" better scrolling of commandline history: Up/Down support partial matching
cnoremap <C-N> <Down>
cnoremap <C-P> <Up>

" Insert Mode {{{2
" Delete forward in insert mode
inoremap <C-l> <Del>
" Fix spelling mistakes
inoremap <C-Space> <c-g>u<Esc>[s1z=`]a<c-g>u


" Visual Mode {{{2
" Search for visual selection: yank selection, then escape slashes in yanked register
" value @" and use very-nomagic search.
vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>


" Leader Key Mappings for plugins{{{2
" Fugitive {{{3
nmap <Leader>gs :Gstatus<CR><C-W>K
nmap <Leader>gS :Gstatus \| only<CR>
nmap <Leader>gd :Gdiff<CR>
nmap <Leader>ge :Gedit<CR>
nmap <Leader>gw :Gwrite<CR>
nmap <Leader>gb :Gblame<CR>
nmap <Leader>gl :Glog<CR>
nmap <Leader>gg :Ggrep <C-R><C-W><CR>

" Tagbar {{{3
nmap <Leader>tg :TagbarOpen fjc<CR>

" CTags {{{3
" Create tags, redirect warnings to /dev/null and skip prompt
nnoremap <Leader>T :!ctags -R --exclude=.git --exclude=logs --exclude=doc --exclude=vendor . 2>/dev/null<CR><CR>

" Other {{{3
nmap <silent> <Leader><Space> :nohl<CR>
nnoremap <Leader>lq :copen<CR>
nnoremap <Leader>ll :lopen<CR>

" FZF {{{2
nnoremap <silent> <Leader>ff :FZFFiles<CR>
nnoremap <silent> <Leader>fF :FZFRg<CR>
nnoremap <silent> <Leader>fb :FZFBuffers<CR>
nnoremap <silent> <Leader>fT :FZFTags<CR>
nnoremap <silent> <Leader>ft :FZFBTags<CR>
nnoremap <silent> <Leader>fh :FZFHelptags<CR>
nnoremap <silent> <Leader>fs :FZFSnippets<CR>
nnoremap <silent> <Leader>fl :FZFBLines<CR>
nnoremap <silent> <Leader>fL :FZFLines<CR>
nnoremap <silent> <Leader>f' :FZFMarks<CR>

" Show mappings in various modes
nmap <leader><tab> <plug>(fzf-maps-n)
xmap <leader><tab> <plug>(fzf-maps-x)
omap <leader><tab> <plug>(fzf-maps-o)

" Insert mode completion
" inoremap <expr> <c-x><c-f> fzf#vim#complete#path('rg --files')
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-l> <plug>(fzf-complete-line)
" imap <c-x><c-f> <plug>(fzf-complete-path)


" ACK {{{2
nnoremap <silent> <Leader>/ :Ack!<Space>


" Whitespace removal {{{2
nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>
nmap _= :call Preserve("normal gg=G")<CR>

" Hebrew
imap <f12> <c-o>:call ToggleHebrew()<cr>
map <f12> :call ToggleHebrew()<cr>

" Plugin Customizations {{{1

" ALE {{{2
let g:ale_set_quickfix = 1

" vim-slime {{{2
let g:slime_target = "tmux"
let g:slime_default_config = {"socket_name": get(split($TMUX, ','), 0), "target_pane": "{top-right}"} " send to tmux pane in the top-right of the active window
let g:slime_python_ipython = '' " HACK: due to bug in vim-ipython-cell's Verbose commands, setting to zero doesn't work

" vim-ipython-cell {{{2
let g:ipython_cell_delimit_cells_by = 'tags'
let g:ipython_cell_tag = ['# %%', '#%%', '# <codecell>', '##', '# In[']
" See also python-specific mappings in custom ftplugin for .ipy

" Jedi {{{2
let g:jedi#squelch_py_warning = 1
let g:jedi#completions_command = "<C-N>"
let g:jedi#popup_on_dot = 1
let g:jedi#show_call_signatures = 1
let g:jedi#show_call_signatures_delay = 250
let g:jedi#auto_close_doc = 0
let g:jedi#popup_select_first = 1

" FZF {{{2
let g:fzf_command_prefix = 'FZF'
let g:fzf_tags_command = 'ctags -R --exclude=.git'
" Note: while fzf is open the following non-configurable maps are available:
" - use ALT+A to select all, ALT+D to deselect all
" - use TAB to select multiple items
" - use ENTER with multiple selected items to open quickfix list with those
"   items
let g:fzf_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-x': 'split',
    \ 'ctrl-v': 'vsplit'}


" Fugitive {{{2
" This maps '..' to go back when browsing object with fugitive.
autocmd User fugitive
  \ if fugitive#buffer().type() =~# '^\%(tree\|blob\)$' |
  \   nnoremap <buffer> .. :edit %:h<CR> |
  \ endif
" Delete fugitive buffers on exit
autocmd BufNewFile,BufRead fugitive://* set bufhidden=delete


" Airline {{{2
let g:airline_powerline_fonts=1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#whitespace#enabled = 1
let g:airline#extensions#tagbar#enabled = 0

" Syntastic {{{2
" Show errors from different checkers together
let g:syntastic_aggregate_errors = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map = {
    \ "mode": "passive",
    \ "active_filetypes": ["python","zsh","sh","tex","latex"],
    \ "passive_filetypes": [] }

" Ack {{{2
" Use ripgrep (rg) as a search tool
if executable('rg')
    let g:ackprg='rg --vimgrep --color=never --no-heading --smart-case'
    set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case\ --color=never
endif
" Prevent Ack from jumping to first result
cnoreabbrev Ack Ack!


" VimTeX and TeX-Conceal {{{2
let g:tex_flavor = "latex"
let g:vimtex_latexmk_build_dir = "aux"
let g:vimtex_compiler_latexmk = {'callback' : 0}
let g:tex_superscripts= "[0-9a-zA-W.,:;+-<>/()=]"
let g:tex_subscripts= "[0-9aehijklmnoprstuvx,+-/().]"
let g:tex_conceal="abdgms"

" UltiSnips {{{2
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsListSnippets=""
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsEnableSnipMate = 1 " Disable snipMate snippets
let g:UltiSnipsEditSplit = 'vertical'

" Pandoc {{{2
let g:pandoc#filetypes#handled = ["pandoc", "markdown"]
let g:pandoc#filetypes#pandoc_markdown = 1      " use pandoc markdown syntax in .md files
let g:pandoc#biblio#bibs = [$HOME."/Documents/library.bib"]
let g:pandoc#formatting#mode = 'h'  " hard wraps
let g:pandoc#hypertext#split_open_cmd = 'edit' " open in same buffer
let g:pandoc#syntax#conceal#use = 0
let g:pandoc#syntax#codeblocks#embeds#langs = ['python', 'vim', 'make', 'bash=sh', 'shell=sh', 'html', 'css', 'scss', 'javascript']
let g:pandoc#syntax#codeblocks#embeds#use = 1

" Custom VIM functions {{{1

" preserve: save state and execute command {{{2
function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" Hebrew support
func! ToggleHebrew()
    if &rl
        set norl
        set keymap=
    else
        set rl
        set keymap=hebrew
    end
endfunc
